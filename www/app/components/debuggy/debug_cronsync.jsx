define(function (require) {
'use strict';

const React = require('react');

const { FormattedMessage } = require('react-intl');

const DebugAccountNewSummary = require('./debug_account_new_summary');

const mailApi = require('gelam/main-frame-setup');


/**
 * Cronsync-centered debug view.
 *
 * Upon entry we:
 * - Register for the "newMessagesUpdate"
 * - Ask the backend to flush the current newness track status.
 *
 * Our display and actions:
 * - We have a big "force cronsync" button that triggers a cronsync.
 * - For each account we show the current summary payload generated by the
 *   backend.  For now our felam implementation is designed to produce exactly
 *   what gaia mail wants so we can just copy the code in.
 * - We show a "clear" button to explicitly request that the new tracking be
 *   cleared
 */
var DebugCronsync = React.createClass({
  getInitialState: function() {
    return {
      newAggr: null
    };
  },

  componentDidMount: function() {
    mailApi.on('newMessagesUpdate', this.onNewMessagesUpdate);
    mailApi.flushNewAggregates();
  },

  componentWillUnmount: function() {
    mailApi.removeListener('newMessagesUpdate', this.onNewMessagesUpdate);
  },

  onNewMessagesUpdate: function(newAggr) {
    this.setState({ newAggr });
  },

  render: function() {
    let perAccountDivs = [];
    let newAggr = this.state.newAggr;
    if (newAggr) {
      for (let [accountId, perAccountData] of newAggr) {
        perAccountDivs.push(
          <DebugAccountNewSummary
            key={ accountId }
            mailApi = { mailApi }
            accountId={ accountId }
            newData={ perAccountData }
            />
        );
      }
    }

    return (
      <div className="debug-cronsync-pane">
        <div className="debug-cronsync-actions">
          <button onClick={ this.forceCronSync }><FormattedMessage
            id='forceCronSync'
            />
          </button>
          <button onClick={ this.forceFlushNew }><FormattedMessage
            id='forceFlushNew'
            />
          </button>
        </div>
        <div className="debug-cronsync-data-dumps">
          { perAccountDivs }
        </div>
      </div>
    );
  },

  forceCronSync: function() {
    mailApi.debugForceCronSync({});
  },

  forceFlushNew: function() {
    mailApi.flushNewAggregates();
  }
});

return DebugCronsync;
});
